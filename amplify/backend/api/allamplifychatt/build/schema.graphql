type User {
  id: ID!
  username: String!
  conversations(filter: ModelConvoLinkFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelConvoLinkConnection
  messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  createdAt: String
  updatedAt: String
}

type Conversation {
  id: ID!
  messages(filter: ModelMessageFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMessageConnection
  associated(filter: ModelConvoLinkFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelConvoLinkConnection
  name: String!
  members: [String!]!
  createdAt: String
  updatedAt: String
}

type Message {
  id: ID!
  author: User
  authorId: String
  content: String!
  conversation: Conversation!
  messageConversationId: ID!
  createdAt: String
  updatedAt: String
}

type ConvoLink {
  id: ID!
  user: User!
  convoLinkUserId: ID
  conversation: Conversation!
  convoLinkConversationId: ID!
  createdAt: String
  updatedAt: String
}

type Subscription {
  onCreateConvoLink(convoLinkUserId: ID!): ConvoLink @aws_subscribe(mutations: ["createConvoLink"])
  onCreateMessage(messageConversationId: ID!): Message @aws_subscribe(mutations: ["createMessage"])
  onCreateUser(id: String!): User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser(id: String!): User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser(id: String!): User @aws_subscribe(mutations: ["deleteUser"])
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  username: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getConvo(id: ID!): Conversation
}

input CreateUserInput {
  id: ID
  username: String!
  createdAt: String
  updatedAt: String
}

input UpdateUserInput {
  id: ID!
  username: String
  createdAt: String
  updatedAt: String
}

input DeleteUserInput {
  id: ID
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createConvo(input: CreateConversationInput!, condition: ModelConversationConditionInput): Conversation
  createMessage(input: CreateMessageInput!, condition: ModelMessageConditionInput): Message
  updateMessage(input: UpdateMessageInput!, condition: ModelMessageConditionInput): Message
  deleteMessage(input: DeleteMessageInput!, condition: ModelMessageConditionInput): Message
  createConvoLink(input: CreateConvoLinkInput!, condition: ModelConvoLinkConditionInput): ConvoLink
  updateConvoLink(input: UpdateConvoLinkInput!, condition: ModelConvoLinkConditionInput): ConvoLink
}

input ModelUserConditionInput {
  username: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelConversationFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  members: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConversationFilterInput]
  or: [ModelConversationFilterInput]
  not: ModelConversationFilterInput
}

input CreateConversationInput {
  id: ID
  name: String!
  members: [String!]!
  createdAt: String
  updatedAt: String
}

input ModelConversationConditionInput {
  name: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConversationConditionInput]
  or: [ModelConversationConditionInput]
  not: ModelConversationConditionInput
}

input ModelMessageFilterInput {
  id: ModelIDInput
  authorId: ModelStringInput
  content: ModelStringInput
  messageConversationId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMessageFilterInput]
  or: [ModelMessageFilterInput]
  not: ModelMessageFilterInput
}

input CreateMessageInput {
  id: ID
  authorId: String
  content: String!
  messageConversationId: ID!
  createdAt: String
  updatedAt: String
}

input UpdateMessageInput {
  id: ID!
  authorId: String
  content: String
  messageConversationId: ID
  createdAt: String
  updatedAt: String
}

input DeleteMessageInput {
  id: ID
}

input ModelMessageConditionInput {
  content: ModelStringInput
  messageConversationId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelMessageConditionInput]
  or: [ModelMessageConditionInput]
  not: ModelMessageConditionInput
}

input ModelConvoLinkFilterInput {
  id: ModelIDInput
  convoLinkUserId: ModelIDInput
  convoLinkConversationId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConvoLinkFilterInput]
  or: [ModelConvoLinkFilterInput]
  not: ModelConvoLinkFilterInput
}

input CreateConvoLinkInput {
  id: ID
  convoLinkUserId: ID
  convoLinkConversationId: ID!
  createdAt: String
  updatedAt: String
}

input UpdateConvoLinkInput {
  id: ID!
  convoLinkUserId: ID
  convoLinkConversationId: ID
  createdAt: String
  updatedAt: String
}

input ModelConvoLinkConditionInput {
  convoLinkUserId: ModelIDInput
  convoLinkConversationId: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelConvoLinkConditionInput]
  or: [ModelConvoLinkConditionInput]
  not: ModelConvoLinkConditionInput
}

type ModelConvoLinkConnection {
  items: [ConvoLink]
  nextToken: String
}

type ModelMessageConnection {
  items: [Message]
  nextToken: String
}
